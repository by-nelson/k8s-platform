AWSTemplateFormatVersion: 2010-09-09
Description: >
  Deploys a dedicated ECS cluster to the platform infrastructure.

Parameters:
  ClusterName:
    Description: ECS cluster name
    Type: String
  VpcId:
    Description: VPC id where cluster networking resources will live
    Type: String
  SubnetIds:
    Description: Available Subnets Ids where cluster networking resources will live
    Type: CommaDelimitedList
  Role:
    Type: String
    Description: Enter the name of an existing IAM Role for the clusters to use
    AllowedPattern: "^[a-zA-Z0-9+=,.@_/-]+$"
    ConstraintDescription: Must be a valid IAM Role name.
  RegionalAPIGatewayId:
    Type: String
    Description: ID of the public Regional API Gateway
  RegionalAPIGatewayRootId:
    Type: String
    Description: ID of root resource for the public Regional API Gateway
  AuthorizerId:
    Type: String
    Description: ID of the REST API Gateway authorizer

Resources:

  # Auth
  TenantUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: "DedicatedTenantUserPool"
      Schema:
        - Name: "tenant_id"
          AttributeDataType: "String"
          Mutable: true
          Required: false
      AutoVerifiedAttributes: []
      VerificationMessageTemplate:
        DefaultEmailOption: "CONFIRM_WITH_CODE"

  TenantUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      UserPoolId: !Ref TenantUserPool
      ClientName: !Sub client-$${q}{ClusterName}
      GenerateSecret: false
      ExplicitAuthFlows:
        - "ALLOW_USER_PASSWORD_AUTH"
        - "ALLOW_REFRESH_TOKEN_AUTH"

  TenantTestUser:
    Type: "AWS::Cognito::UserPoolUser"
    Properties:
      UserPoolId: !Ref TenantUserPool
      Username: !Sub user-$${q}{ClusterName}
      UserAttributes:
        - Name: "custom:tenant_id"
          Value: !Sub $${q}{ClusterName}-tenant-id-1232-4565-7898

  # API Key
  TenantKey:
    Type: 'AWS::ApiGateway::ApiKey'
    Properties:
      Name: !Sub $${q}{ClusterName}
      Description: CloudFormation API Key for Dedicated Tenant
      Enabled: true
      Value: !Sub $${q}{ClusterName}-tenant-id-1232-4565-7898


  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP, HTTPS, and custom HTTP traffic
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: "Name"
          Value: "platform-pubic-access"

  # API Gateway cluster resource
  ClusterResourceRoot:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RegionalAPIGatewayId
      ParentId: !Ref RegionalAPIGatewayRootId
      PathPart: !Ref ClusterName

  # Connectivity
  InternalLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub lb-$${q}{ClusterName}
      Scheme: internal
      Subnets:
        - !Select [ 0, !Ref SubnetIds]
        - !Select [ 1, !Ref SubnetIds]
      Type: network
      IpAddressType: ipv4
      SecurityGroups:
        - !GetAtt ClusterSecurityGroup.GroupId

  ## API Gateway Link
  InternalLink:
    Type: AWS::ApiGateway::VpcLink
    Properties:
      Name: !Sub api-private-link-to-vpc-$${q}{ClusterName}
      TargetArns:
        - !Ref InternalLoadBalancer

  # Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT

  # Tasks
  TestAPIDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub test-api-task-def-$${q}{ClusterName}
      ContainerDefinitions:
        - Name: test-api
          Image: docker.io/vanapagan/test-rest-api:latest
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
          Essential: true
      NetworkMode: awsvpc
      Cpu: 1 vCPU
      Memory: 2 GB
      RequiresCompatibilities:
        - EC2
        - FARGATE
      TaskRoleArn: !Sub arn:aws:iam::$${q}{AWS::AccountId}:role/$${q}{Role}
      ExecutionRoleArn: !Sub arn:aws:iam::$${q}{AWS::AccountId}:role/$${q}{Role}
      Tags:
        - Key: cluster
          Value: !Ref ClusterName
  
  # Service: test-api
  ## Target Group
  TestAPITargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub service-nlb-$${q}{ClusterName}
      Port: 8080
      Protocol: TCP
      TargetType: ip
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "300"

  ## Listener
  TestAPIListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TestAPITargetGroup
      LoadBalancerArn: !Ref InternalLoadBalancer
      Port: 8080
      Protocol: TCP
  
  ## Service
  TestAPIService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: test-api-service
      Cluster: !Ref ClusterName
      TaskDefinition: !Ref TestAPIDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: test-api
          ContainerPort: 8080
          TargetGroupArn: !Ref TestAPITargetGroup
      HealthCheckGracePeriodSeconds: "20"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ClusterSecurityGroup
          Subnets:
            - !Select [ 0, !Ref SubnetIds]
            - !Select [ 1, !Ref SubnetIds]
      PlatformVersion: LATEST
      DeploymentController:
        Type: ECS
    DependsOn:
      - TestAPIListener

  ## API Resource
  TestAPIResourceTest:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RegionalAPIGatewayId
      ParentId: !Ref ClusterResourceRoot
      PathPart: test

  TestAPIResourceHostname:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RegionalAPIGatewayId
      ParentId: !Ref ClusterResourceRoot
      PathPart: hostname

  ## API Method
  TestAPIResouceTestGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: true
      RestApiId: !Ref RegionalAPIGatewayId
      ResourceId: !Ref TestAPIResourceTest
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref AuthorizerId
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: GET
        Uri: !Sub
          - "http://$${q}{NLB}:8080/test"
          - NLB: !GetAtt InternalLoadBalancer.DNSName
        ConnectionType: VPC_LINK
        ConnectionId: !Ref InternalLink

  TestAPIResouceHostnameGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: true
      RestApiId: !Ref RegionalAPIGatewayId
      ResourceId: !Ref TestAPIResourceHostname
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref AuthorizerId
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: GET
        Uri: !Sub
          - "http://$${q}{NLB}:8080/hostname"
          - NLB: !GetAtt InternalLoadBalancer.DNSName
        ConnectionType: VPC_LINK
        ConnectionId: !Ref InternalLink

  # Temp base deployment
  BaseDedicatedDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RegionalAPIGatewayId
      Description: Base initial deployment
      StageName: Base
    DependsOn: 
      - TestAPIResouceHostnameGet

  # Usage Plan
  UsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    Properties:
      ApiStages:
        - ApiId: !Ref RegionalAPIGatewayId
          Stage: Base
          Throttle:
            "*/*":
              RateLimit: 1
              BurstLimit: 1
            # TODO: make generic
            "/dedicated-cluster/test/GET":
              RateLimit: 10
              BurstLimit: 20
            "/dedicated-cluster/hostname/GET":
              RateLimit: 10
              BurstLimit: 20
      Description: Dedicated tenant usage plan
      Throttle:
        BurstLimit: 10
        RateLimit: 20
      UsagePlanName: !Sub $${q}{ClusterName}-plan

  UsagePlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyId: !Ref TenantKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan



Outputs:
  UserPoolId:
    Value: !Ref TenantUserPool

  UserName:
    Value: !Ref TenantTestUser

  ClientId:
    Value: !Ref TenantUserPoolClient

  TenantKeyId:
    Value: !Ref TenantKey
