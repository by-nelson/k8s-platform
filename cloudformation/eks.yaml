AWSTemplateFormatVersion: "2010-09-09"
  #Transform: 'AWS::LanguageExtensions'
Description: Deploys an EKS cluster after creating needed networking capabilities
Parameters:
  VpcCIDR:
    Description: VPC IPv4 CIDR block to use
    Type: String
    AllowedPattern: '^(\d{1,3}\.){3}\d{1,3}\/\d{1,2}$'
    ConstraintDescription: Must be a valid CIDR block in the format x.x.x.x/x
  AvailabilityZones:
    Type: CommaDelimitedList
    Description: Enter two availability zones where worker nodes will live
  SubnetsCIDR:
    Type: CommaDelimitedList
    Description: Enter two non-overlapping CIDR blocks that belong to VpcCIDR
    AllowedPattern: '^(\d{1,3}\.){3}\d{1,3}\/\d{1,2}$'
    ConstraintDescription: Must be a valid CIDR block in the format x.x.x.x/x
  ClusterName:
    Description: Cluster Name
    Type: String
    Default: manager-cluster
  Role:
    Type: String
    Description: Enter the name of an existing IAM Role for the EKS cluster
    AllowedPattern: "^[a-zA-Z0-9+=,.@_/-]+$"
    ConstraintDescription: Must be a valid IAM Role name.

#Conditions:
# TwoAZsProvided: !Equals 
#   - Fn::Length:
#       !Ref AvailabilityZones
#   - 2
# TwoSubnetsProvided: !Equals
#   - Fn::Length:
#       !Ref SubnetsCIDR
#   - 2
# Subnets: !And [ !Condition TwoAZsProvided, !Condition TwoSubnetsProvided ]


Resources:

  # Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-vpc'

  SubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Ref SubnetsCIDR]
      AvailabilityZone: !Select [0, !Ref AvailabilityZones] 

  SubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Ref SubnetsCIDR]
      AvailabilityZone: !Select [1, !Ref AvailabilityZones] 

  # https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html?icmpid=docs_eks_help_panel_hp_cluster_configure_security_groups
  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster security group
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-sg'

  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ClusterSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref ClusterSecurityGroup
    DependsOn: ClusterSecurityGroup


  SecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref ClusterSecurityGroup
      IpProtocol: -1
      CidrIp: 0.0.0.0/0
    DependsOn: ClusterSecurityGroup

  # EKS Cluster
  Cluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: "1.31"
      RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${Role}'
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ClusterSecurityGroup
        SubnetIds:
          - !Ref SubnetOne
          - !Ref SubnetTwo
        EndpointPublicAccess: true
        EndpointPrivateAccess: true
      Logging:
        ClusterLogging:
          EnabledTypes:
            - Type: api
            - Type: audit
